package handlers

import (
	"PrytkovaBot/internal/services"
	"PrytkovaBot/internal/utils"
	"fmt"
	tele "gopkg.in/telebot.v4"
	"log"
	"net/url"
	"strconv"
	"strings"
)

var AdminId int64

const (
	DietButton         = "buy_item"
	RegisterButton     = "register"
	ProgramsButton     = "programs"
	AcceptRegistration = "accept_registration"
	FirstDiet          = "first_diet"
	SecondDiet         = "second_diet"
	Pay                = "pay"
	FirstDietAmount    = 990
	SecondDietAmount   = 1590
	CheckPayment       = "check_payment"
)

func RegisterHandlers(b *tele.Bot, adminId int64) {
	AdminId = adminId
	b.Handle("/start", startHandler)
	b.Handle(tele.OnCallback, inlineButtonHandler)
}

func startHandler(c tele.Context) error {
	if c.Sender().ID == AdminId {
		return c.Send("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
	}
	selector := &tele.ReplyMarkup{}
	btnBuy := selector.Data("–†–∞—Ü–∏–æ–Ω—ã", DietButton)
	btnRegister := selector.Data("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", RegisterButton)
	btnPrograms := selector.Data("–ü—Ä–æ–≥—Ä–∞–º–º—ã", ProgramsButton)
	selector.Inline(
		selector.Row(btnBuy),
		selector.Row(btnRegister),
		selector.Row(btnPrograms),
	)
	return c.Send("–ù–∞ —Å–≤—è–∑–∏ –ø–æ–º–æ—â–Ω–∏–∫ –†–µ–≥–∏–Ω—ã –ü—Ä—ã—Ç–∫–æ–≤–æ–πüë©‚Äçüíº.\n–†–∞–¥a –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–µ!üëã –¢—É—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏üòã.\n\nüéØ –°–º–æ—Ç—Ä–∏,  —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π. –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", selector)
}

func inlineButtonHandler(c tele.Context) error {
	data := strings.TrimSpace(c.Callback().Data)
	parts := strings.Split(data, "@")

	if len(parts) < 1 {
		return c.Respond()
	}

	action := parts[0]

	switch action {
	case RegisterButton:
		return registerHandler(c)
	case ProgramsButton:
		return programsHandler(c)
	case AcceptRegistration:
		if len(parts) < 2 {
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
		}
		return handleRegistrationResponse(c, parts[1])
	case DietButton:
		return dietHandler(c)
	case FirstDiet, SecondDiet:
		return handleDietButtons(c, action)
	case Pay:
		switch parts[1] {
		case FirstDiet:
			return handlePay(c, FirstDietAmount)
		case SecondDiet:
			return handlePay(c, SecondDietAmount)
		}
	case CheckPayment:
		return handleCheckPayment(c, parts[1], parts[2])

	}
	return c.Respond()
}

func handleCheckPayment(c tele.Context, paymentId string, amount string) error {
	state, err := services.GetState(paymentId)
	if err != nil {
		return err
	}
	if state == "CONFIRMED" {
		err = c.Send("–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
		var document *tele.Document
		a, _ := strconv.ParseFloat(amount, 64)
		switch a {
		case FirstDietAmount:
			document = &tele.Document{File: tele.FromDisk("diet1.pdf"), FileName: "–î–∏–µ—Ç–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏.pdf"}
		case SecondDietAmount:
			document = &tele.Document{File: tele.FromDisk("diet2.pdf"), FileName: "–î–∏–µ—Ç–∞ –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏.pdf"}
		}
		_, err = c.Bot().Send(c.Sender(), document, tele.Protected)
	}
	return nil
}

func handlePay(c tele.Context, amount float64) error {
	paymentUrl, paymentId, err := services.InitTransaction(amount)
	if err != nil {
		return err
	}
	selector := &tele.ReplyMarkup{}
	btnCheckPayment := selector.Data("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", fmt.Sprintf("%s@%s@%f", CheckPayment, paymentId, amount))
	selector.Inline(selector.Row(btnCheckPayment))

	return c.Edit("–û–ø–ª–∞—Ç–∏—Ç—å: "+paymentUrl, selector)
}

func programsHandler(c tele.Context) error {
	selector := &tele.ReplyMarkup{}
	selector.Inline(
		selector.Row(
			selector.URL("–•–æ—á—É –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É!", utils.GetWhatsAppString()),
		),
	)
	return c.Send("–Ø –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–æ–±–æ–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—è –ø—Ä–æ–≥—Ä–∞–º–º—É\\. "+
		"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á–µ–∫\\-–ª–∏—Å—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\\. –í–º–µ—Å—Ç–µ –º—ã –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–µ–º —Ç–≤–æ–∏ —Ü–µ–ª–∏ "+
		"–∏ —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º\\.\n"+
		"üîπ*–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å:*\n\n‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n‚Ä¢ –ß–µ–∫\\-–ª–∏—Å—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è\n‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n",
		tele.ModeMarkdownV2, selector)
}

func registerHandler(c tele.Context) error {
	selector := &tele.ReplyMarkup{}
	btnAccept := selector.Data("‚úÖ", fmt.Sprintf("%s@%d", AcceptRegistration, c.Sender().ID))
	selector.Inline(
		selector.Row(btnAccept),
	)

	err := c.Send("–ü–æ—Ö–æ–∂–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø–∏—Ç–∞–Ω–∏–∏, –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–∞—Ü–∏–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ –º–µ—à–∞–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥, –º–æ—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ\\. –ú—ã —Ä–∞–∑–±–µ—Ä–µ–º—Å—è, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—ã–º –∏ —É–¥–æ–±–Ω—ã–º\\."+
		"\n*–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\\. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\\.*", tele.ModeMarkdownV2)

	_, err = c.Bot().Send(tele.ChatID(AdminId), fmt.Sprintf("–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: @%s (ID: %d) —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", c.Sender().Username, c.Sender().ID), selector)
	return err
}

func handleRegistrationResponse(c tele.Context, userIDStr string) error {
	greeting := "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ö–æ—á—É –∫ –≤–∞–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."
	userToId, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	selector := &tele.ReplyMarkup{}
	whatsAppUrl, err := url.Parse("https://wa.me/79659413788")
	if err != nil {
		log.Fatal(err)
	}
	params := url.Values{}
	params.Add("text", greeting)
	whatsAppUrl.RawQuery = params.Encode()
	selector.Inline(
		selector.Row(
			selector.URL("WhatsApp", whatsAppUrl.String()),
		),
		selector.Row(
			selector.URL("Telegram", fmt.Sprintf("https://t.me/ReginaUspeshnaya?text=%s", greeting)),
		),
	)
	responseText := "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
	_, err = c.Bot().Send(tele.ChatID(userToId), fmt.Sprintf("%s\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–πüëáüèª", responseText), selector)
	err = c.Edit(strings.ReplaceAll(c.Message().Text, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", ""))
	err = c.Reply(responseText)
	return err
}

func dietHandler(c tele.Context) error {
	selector := &tele.ReplyMarkup{}
	btnFirst := selector.Data("–Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –∑–∞ 990 —Ä—É–±–ª–µ–π üî•", FirstDiet)
	btnSecond := selector.Data("–Ω–∞ 4 –Ω–µ–¥–µ–ª–∏ –∑–∞ 1590 —Ä—É–±–ª–µ–π üî•", SecondDiet)
	selector.Inline(
		selector.Row(btnFirst),
		selector.Row(btnSecond),
	)

	return c.Send("–ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –†–ê–¶–ò–û–ù–ê ‚Äî –æ–Ω–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –ª–µ–≥–∫–∏–µ\\! "+
		"–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞–ª–∞–¥–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –±–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\\. –¢—ã –±—É–¥–µ—à—å —É–¥–∏–≤–ª–µ–Ω–∞, "+
		"–∫–∞–∫ –ø—Ä–æ—Å—Ç–æ –∏ –≤–∫—É—Å–Ω–æ –º–æ–∂–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è\\!\n\nüîπ*–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ä–µ—Ü–µ–ø—Ç—ã\n", tele.ModeMarkdownV2, selector)
}

func handleDietButtons(c tele.Context, action string) error {
	selector := &tele.ReplyMarkup{}
	unique := ""
	description := ""
	if action == FirstDiet {
		unique = Pay + "@" + FirstDiet
		description = "–û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–µ—Ç—ã –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏"
	} else if action == SecondDiet {
		unique = Pay + "@" + SecondDiet
		description = "–û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–µ—Ç—ã –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏"
	}
	btnBuy := selector.Data("–û–ø–ª–∞—Ç–∏—Ç—å", unique)
	selector.Inline(
		selector.Row(btnBuy),
	)
	return c.Send(description, selector)
}
