package handlers

import (
	"fmt"
	tele "gopkg.in/telebot.v4"
	"strconv"
	"strings"
)

var AdminId int64

const (
	DietButton         = "buy_item"
	RegisterButton     = "register"
	AcceptRegistration = "accept_registration"
	RejectRegistration = "reject_registration"
	FirstDiet          = "first_diet"
	SecondDiet         = "second_diet"
	Buy                = "buy"
)

func RegisterHandlers(b *tele.Bot, adminId int64) {
	AdminId = adminId
	//b.Handle(tele.OnText, registerHandler)
	b.Handle("/start", startHandler)
	b.Handle(tele.OnCallback, inlineButtonHandler)
}

func startHandler(c tele.Context) error {
	if c.Sender().ID == AdminId {
		return c.Send("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
	}
	selector := &tele.ReplyMarkup{}
	btnBuy := selector.Data("–†–∞—Ü–∏–æ–Ω—ã", DietButton)
	btnRegister := selector.Data("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", RegisterButton)
	selector.Inline(
		selector.Row(btnBuy),
		selector.Row(btnRegister),
	)
	return c.Send("–ù–∞ —Å–≤—è–∑–∏ –ø–æ–º–æ—â–Ω–∏–∫ –†–µ–≥–∏–Ω—ã –ü—Ä—ã—Ç–∫–æ–≤–æ–πüë©‚Äçüíº.\n–†–∞–¥a –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–µ!üëã –¢—É—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è, –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏ –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏üòã.\n\nüéØ –°–º–æ—Ç—Ä–∏,  —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π. –í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", selector)
}

func inlineButtonHandler(c tele.Context) error {
	data := strings.TrimSpace(c.Callback().Data)
	parts := strings.Split(data, "@")

	if len(parts) < 1 {
		return c.Respond()
	}

	action := parts[0]

	switch action {
	case RegisterButton:
		return registerHandler(c)
	case AcceptRegistration, RejectRegistration:
		if len(parts) < 2 {
			return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
		}
		return handleRegistrationResponse(c, action, parts[1])
	case DietButton:
		return dietHandler(c)
	case FirstDiet, SecondDiet:
		return handleDietButtons(c, action)
	}
	return c.Respond()
}

func registerHandler(c tele.Context) error {
	selector := &tele.ReplyMarkup{}
	btnAccept := selector.Data("‚úÖ", fmt.Sprintf("%s@%d", AcceptRegistration, c.Sender().ID))
	btnReject := selector.Data("‚ùå", fmt.Sprintf("%s@%d", RejectRegistration, c.Sender().ID))
	selector.Inline(
		selector.Row(btnReject, btnAccept),
	)
	err := c.Send("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

	if err != nil {
		return err
	}
	_, err = c.Bot().Send(tele.ChatID(AdminId), fmt.Sprintf("–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: @%s (ID: %d) —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", c.Sender().Username, c.Sender().ID), selector)
	return err
}

func handleRegistrationResponse(c tele.Context, action, userIDStr string) error {
	userToId, err := strconv.ParseInt(userIDStr, 10, 64)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}
	var responseText string
	if action == AcceptRegistration {
		responseText = "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
		_, err = c.Bot().Send(tele.ChatID(userToId), fmt.Sprintf("%s\n%s", responseText, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π: @kizzzzzaaaaa"))
	} else {
		responseText = "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
		_, err = c.Bot().Send(tele.ChatID(userToId), fmt.Sprintf("%s", responseText))
	}
	err = c.Reply(responseText)

	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
	}
	//if action == AcceptRegistration {
	//	_, err = c.Bot().Send(tele.ChatID(userToId), fmt.Sprintf("%s\n%s", responseText, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π: @kizzzzzaaaaa"))
	//} else {
	//	_, err = c.Bot().Send(tele.ChatID(userToId), fmt.Sprintf("%s", responseText))
	//}
	return err
}

func dietHandler(c tele.Context) error {
	selector := &tele.ReplyMarkup{}
	btnFirst := selector.Data("–Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –∑–∞ 990 —Ä—É–±–ª–µ–π üî•", FirstDiet)
	btnSecond := selector.Data("–Ω–∞ 4 –Ω–µ–¥–µ–ª–∏ –∑–∞ 1590 —Ä—É–±–ª–µ–π üî•", SecondDiet)
	selector.Inline(
		selector.Row(btnFirst),
		selector.Row(btnSecond),
	)
	return c.Send("–ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –†–ê–¶–ò–û–ù–ê ‚Äî –æ–Ω–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏ –ª–µ–≥–∫–∏–µ! "+
		"–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞–ª–∞–¥–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –±–µ–∑ –∂–µ—Å—Ç–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –¢—ã –±—É–¥–µ—à—å —É–¥–∏–≤–ª–µ–Ω–∞, "+
		"–∫–∞–∫ –ø—Ä–æ—Å—Ç–æ –∏ –≤–∫—É—Å–Ω–æ –º–æ–∂–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è!\n", selector)
}

func handleDietButtons(c tele.Context, action string) error {
	selector := &tele.ReplyMarkup{}
	unique := ""
	description := ""
	if action == FirstDiet {
		unique = Buy + "@" + FirstDiet
		description = "–û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–µ—Ç—ã –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏"
	} else if action == SecondDiet {
		unique = Buy + "@" + FirstDiet
		description = "–û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–µ—Ç—ã –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏"
	}
	btnBuy := selector.Data("–û–ø–ª–∞—Ç–∏—Ç—å", unique)
	selector.Inline(
		selector.Row(btnBuy),
	)
	return c.Send(description, selector)
}

func echoHandler(c tele.Context) error {
	if AdminId == c.Sender().ID {
		return c.Send(c.Message().Text)
	}
	return nil
}
