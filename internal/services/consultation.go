package services

import (
	"PrytkovaBot/internal/storage"
	"database/sql"
	"fmt"
	"gopkg.in/telebot.v4"
	"log"
	"strings"
	"time"
)

func FormatAvailableSlots(db *sql.DB) ([][]telebot.InlineButton, error) {
	buttonsInRow := 3
	maxRows := 6
	slots, err := storage.GetAvailableSlots(db)
	if err != nil {
		return nil, err
	}

	if len(slots) == 0 {
		return nil, fmt.Errorf("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ ü´†")
	}
	var buttons [][]telebot.InlineButton

	for j := 0; j < len(slots)/buttonsInRow && j < maxRows; j++ {
		var row []telebot.InlineButton
		for i := 0; i < buttonsInRow && j*buttonsInRow+i < len(slots); i++ {
			row = append(row, telebot.InlineButton{
				Text:   fmt.Sprintf("%s", slots[j*buttonsInRow+i].Time.Format("02.01 ‚Ä¢ 15:04")),
				Unique: fmt.Sprintf("book@%d", slots[j*buttonsInRow+i].ID),
			})
		}
		buttons = append(buttons, row)
	}

	return buttons, nil
}

var months = [...]string{
	"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
	"–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
}

var weekdays = [...]string{
	"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞",
}

func FormatBookedSlots(db *sql.DB) (string, error) {
	slots, err := storage.GetBookedSlots(db)
	if err != nil {
		return "", err
	}

	if len(slots) == 0 {
		return "–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.", nil
	}

	var sb strings.Builder
	sb.WriteString("–ó–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:\n\n")

	var prevDate string
	for _, s := range slots {
		currentDate := formatDateRuWithWeekday(s.Time)
		if prevDate != currentDate {
			if prevDate != "" {
				sb.WriteString("\n")
			}
			sb.WriteString(fmt.Sprintf("üìÖ %s\n", currentDate))
			prevDate = currentDate
		}
		line := fmt.Sprintf("‚Ä¢ %s ‚Äî @%s (id %d)\n",
			s.Time.Format("15:04"),
			s.UserName,
			s.UserID,
		)
		sb.WriteString(line)
	}

	return sb.String(), nil
}

// formatDateRuWithWeekday —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç–∏–ª–µ "17 –∞–ø—Ä–µ–ª—è (—Å—Ä–µ–¥–∞)"
func formatDateRuWithWeekday(t time.Time) string {
	day := t.Day()
	month := months[t.Month()-1]
	weekday := weekdays[t.Weekday()] // Sunday == 0
	return fmt.Sprintf("%d %s (%s)", day, month, weekday)
}

func CreateSlotsPerPeriod(db *sql.DB, period time.Duration) {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
	go func() {
		ticker := time.NewTicker(period)
		defer ticker.Stop()

		// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤
		err := storage.CreateSlots(db)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: %v", err)
		}

		for {
			select {
			case <-ticker.C:
				// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
				err := storage.CreateSlots(db)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: %v", err)
				} else {
					log.Println("–°–ª–æ—Ç—ã –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
				}
			}
		}
	}()
}
